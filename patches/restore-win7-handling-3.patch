diff --git a/Lib/_pyrepl/main.py b/Lib/_pyrepl/main.py
index 447eb1e..975c0ac 100644
--- a/Lib/_pyrepl/main.py
+++ b/Lib/_pyrepl/main.py
@@ -16,7 +16,7 @@ try:
         raise RuntimeError(err)
 except Exception as e:
     CAN_USE_PYREPL = False
-    FAIL_REASON = f"warning: can't use pyrepl: {e}"
+    FAIL_REASON = ""
 else:
     CAN_USE_PYREPL = True
     FAIL_REASON = ""
diff --git a/Modules/_winapi.c b/Modules/_winapi.c
index 02817e0..706c1c5 100644
--- a/Modules/_winapi.c
+++ b/Modules/_winapi.c
@@ -2892,6 +2892,8 @@ _winapi_NeedCurrentDirectoryForExePath_impl(PyObject *module,
     return result;
 }
 
+typedef HRESULT (WINAPI *CopyFile2Func)(PCWSTR pwszExistingFileName, PCWSTR pwszNewFileName, COPYFILE2_EXTENDED_PARAMETERS *pExtendedParameters);
+static CopyFile2Func Py_CopyFile2;
 
 /*[clinic input]
 _winapi.CopyFile2
@@ -2934,7 +2936,7 @@ _winapi_CopyFile2_impl(PyObject *module, LPCWSTR existing_file_name,
     }
     */
     Py_BEGIN_ALLOW_THREADS;
-    hr = CopyFile2(existing_file_name, new_file_name, &params);
+    hr = Py_CopyFile2(existing_file_name, new_file_name, &params);
     Py_END_ALLOW_THREADS;
     /* For future implementation.
     if (progress_routine != Py_None) {
@@ -3236,5 +3238,21 @@ static struct PyModuleDef winapi_module = {
 PyMODINIT_FUNC
 PyInit__winapi(void)
 {
+    HMODULE hKernel32 = GetModuleHandleW(L"kernel32");
+    if (!hKernel32) return NULL;
+    if (!(Py_CopyFile2 = (CopyFile2Func)GetProcAddress(hKernel32, "CopyFile2"))) {
+        for (PyMethodDef *method = winapi_functions; method->ml_name; method++) {
+            if (!strcmp(method->ml_name, "CopyFile2")) {
+                PyMethodDef *last = winapi_functions + Py_ARRAY_LENGTH(winapi_functions) - 2;
+                if (method == last) {
+                    memset(method, 0, sizeof(*method));
+                } else {
+                    *method = *last;
+                    memset(last, 0, sizeof(*last));
+                }
+                break;
+            }
+        }
+    }
     return PyModuleDef_Init(&winapi_module);
 }
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index 904c2f5..4ee0c91 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -20,6 +20,7 @@
 #include "pycore_fileutils.h"     // _Py_closerange()
 #include "pycore_import.h"        // _PyImport_AcquireLock()
 #include "pycore_initconfig.h"    // _PyStatus_EXCEPTION()
+#include "pycore_lock.h"          // _PyOnceFlag_CallOnce()
 #include "pycore_long.h"          // _PyLong_IsNegative()
 #include "pycore_moduleobject.h"  // _PyModule_GetState()
 #include "pycore_object.h"        // _PyObject_LookupSpecial()
@@ -9468,6 +9469,30 @@ win32_getppid_fast(void)
     return cached_ppid;
 }
 
+static _PyOnceFlag once;
+typedef DWORD (WINAPI *PssCaptureSnapshotFunc)(HANDLE ProcessHandle, PSS_CAPTURE_FLAGS CaptureFlags, DWORD ThreadContextFlags, HPSS* SnapshotHandle);
+typedef DWORD (WINAPI *PssQuerySnapshotFunc)(HPSS SnapshotHandle, PSS_QUERY_INFORMATION_CLASS InformationClass, void* Buffer, DWORD BufferLength);
+typedef DWORD (WINAPI *PssFreeSnapshotFunc)(HANDLE ProcessHandle, HPSS SnapshotHandle);
+static PssCaptureSnapshotFunc Py_PssCaptureSnapshot;
+static PssQuerySnapshotFunc Py_PssQuerySnapshot;
+static PssFreeSnapshotFunc Py_PssFreeSnapshot;
+
+static int Py_ProcessSnapshot_Init(void *Py_UNUSED(arg))
+{
+    HMODULE hKernel32 = GetModuleHandleW(L"kernel32");
+    if (hKernel32) {
+        Py_PssCaptureSnapshot = (PssCaptureSnapshotFunc)GetProcAddress(hKernel32, "PssCaptureSnapshot");
+        Py_PssQuerySnapshot = (PssQuerySnapshotFunc)GetProcAddress(hKernel32, "PssQuerySnapshot");
+        Py_PssFreeSnapshot = (PssFreeSnapshotFunc)GetProcAddress(hKernel32, "PssFreeSnapshot");
+        if (!Py_PssCaptureSnapshot || !Py_PssQuerySnapshot || !Py_PssFreeSnapshot) {
+            Py_PssCaptureSnapshot = NULL;
+            Py_PssQuerySnapshot = NULL;
+            Py_PssFreeSnapshot = NULL;
+        }
+    }
+    return 0;
+}
+
 static PyObject*
 win32_getppid(void)
 {
@@ -9483,24 +9508,28 @@ win32_getppid(void)
     }
 
     // If failure occurs in win32_getppid_fast(), fall back to using the PSS API.
+    _PyOnceFlag_CallOnce(&once, Py_ProcessSnapshot_Init, NULL);
+    if (Py_PssCaptureSnapshot) {
+        error = Py_PssCaptureSnapshot(process, PSS_CAPTURE_NONE, 0, &snapshot);
+        if (error != ERROR_SUCCESS) {
+            return PyErr_SetFromWindowsErr(error);
+        }
 
-    error = PssCaptureSnapshot(process, PSS_CAPTURE_NONE, 0, &snapshot);
-    if (error != ERROR_SUCCESS) {
-        return PyErr_SetFromWindowsErr(error);
-    }
+        PSS_PROCESS_INFORMATION info;
+        error = Py_PssQuerySnapshot(snapshot, PSS_QUERY_PROCESS_INFORMATION, &info,
+            sizeof(info));
+        if (error == ERROR_SUCCESS) {
+            result = PyLong_FromUnsignedLong(info.ParentProcessId);
+        } else {
+            result = PyErr_SetFromWindowsErr(error);
+        }
 
-    PSS_PROCESS_INFORMATION info;
-    error = PssQuerySnapshot(snapshot, PSS_QUERY_PROCESS_INFORMATION, &info,
-                             sizeof(info));
-    if (error == ERROR_SUCCESS) {
-        result = PyLong_FromUnsignedLong(info.ParentProcessId);
-    }
-    else {
-        result = PyErr_SetFromWindowsErr(error);
+        Py_PssFreeSnapshot(process, snapshot);
+        return result;
+    } else {
+        PyErr_SetString(PyExc_OSError, "unable to obtain parent PID");
+        return NULL;
     }
-
-    PssFreeSnapshot(process, snapshot);
-    return result;
 }
 #endif /*MS_WINDOWS*/
 
diff --git a/Python/ceval.c b/Python/ceval.c
index 42080f7..5c55313 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -23,6 +23,7 @@
 #include "pycore_intrinsics.h"
 #include "pycore_jit.h"
 #include "pycore_list.h"          // _PyList_GetItemRef()
+#include "pycore_lock.h"          // _PyOnceFlag_CallOnce()
 #include "pycore_long.h"          // _PyLong_GetZero()
 #include "pycore_moduleobject.h"  // PyModuleObject
 #include "pycore_object.h"        // _PyObject_GC_TRACK()
@@ -425,13 +426,46 @@ int pthread_attr_destroy(pthread_attr_t *a)
 #endif
 
 
+#ifdef WIN32
+#include <winternl.h>
+#include <stdlib.h>
+static _PyOnceFlag once;
+typedef VOID(WINAPI* GetCurrentThreadStackLimitsFunc)(PULONG_PTR LowLimit, PULONG_PTR HighLimit);
+
+static VOID WINAPI Py_GetCurrentThreadStackLimits_impl(PULONG_PTR LowLimit, PULONG_PTR HighLimit)
+{
+    // inspired by Wine's implementation of GetCurrentThreadStackLimits()
+    PTEB teb = NtCurrentTeb();
+    PVOID low;
+    memcpy(&low, teb->Reserved3 + _countof(teb->Reserved3) - sizeof(PVOID), sizeof(PVOID));
+    *LowLimit = (ULONG_PTR)low;
+    *HighLimit = (ULONG_PTR)teb->Reserved1[1];
+}
+
+
+static GetCurrentThreadStackLimitsFunc Py_GetCurrentThreadStackLimits = Py_GetCurrentThreadStackLimits_impl;
+
+
+static int Py_GetCurrentThreadStackLimits_Init(void* Py_UNUSED(arg))
+{
+    HMODULE hKernel32 = GetModuleHandleW(L"kernel32");
+    if (hKernel32) {
+        GetCurrentThreadStackLimitsFunc func = (GetCurrentThreadStackLimitsFunc)GetProcAddress(hKernel32, "GetCurrentThreadStackLimits");
+        if (func) Py_GetCurrentThreadStackLimits = func;
+    }
+    return 0;
+}
+#endif
+
+
 void
 _Py_InitializeRecursionLimits(PyThreadState *tstate)
 {
     _PyThreadStateImpl *_tstate = (_PyThreadStateImpl *)tstate;
 #ifdef WIN32
+    _PyOnceFlag_CallOnce(&once, Py_GetCurrentThreadStackLimits_Init, NULL);
     ULONG_PTR low, high;
-    GetCurrentThreadStackLimits(&low, &high);
+    Py_GetCurrentThreadStackLimits(&low, &high);
     _tstate->c_stack_top = (uintptr_t)high;
     ULONG guarantee = 0;
     SetThreadStackGuarantee(&guarantee);
diff --git a/Python/fileutils.c b/Python/fileutils.c
index 78603d4..79d3b00 100644
--- a/Python/fileutils.c
+++ b/Python/fileutils.c
@@ -1489,11 +1489,17 @@ set_inheritable(int fd, int inheritable, int raise, int *atomic_flag_works)
     else
         flags = 0;
 
-    if (!SetHandleInformation(handle, HANDLE_FLAG_INHERIT, flags)) {
+    /* This check can be removed once support for Windows 7 ends. */
+#define CONSOLE_PSEUDOHANDLE(handle) (((ULONG_PTR)(handle) & 0x3) == 0x3 && \
+        GetFileType(handle) == FILE_TYPE_CHAR)
+
+    if (!CONSOLE_PSEUDOHANDLE(handle) &&
+        !SetHandleInformation(handle, HANDLE_FLAG_INHERIT, flags)) {
         if (raise)
             PyErr_SetFromWindowsErr(0);
         return -1;
     }
+#undef CONSOLE_PSEUDOHANDLE
     return 0;
 
 #else
diff --git a/Python/pytime.c b/Python/pytime.c
index 67cf643..1fb116c 100644
--- a/Python/pytime.c
+++ b/Python/pytime.c
@@ -1,5 +1,6 @@
 #include "Python.h"
 #include "pycore_initconfig.h"    // _PyStatus_ERR
+#include "pycore_lock.h"          // _PyOnceFlag_CallOnce()
 #include "pycore_pystate.h"       // _Py_AssertHoldsTstate()
 #include "pycore_runtime.h"       // _PyRuntime
 #include "pycore_time.h"          // PyTime_t
@@ -10,6 +11,7 @@
 #endif
 #ifdef MS_WINDOWS
 #  include <winsock2.h>           // struct timeval
+#  include <windows.h>
 #endif
 
 #if defined(__APPLE__)
@@ -896,6 +898,22 @@ _PyTime_AsTimespec(PyTime_t t, struct timespec *ts)
 #endif
 
 
+#ifdef MS_WINDOWS
+static _PyOnceFlag once;
+typedef VOID (WINAPI *GetSystemTimePreciseAsFileTimeFunc)(LPFILETIME lpSystemTimeAsFileTime);
+static GetSystemTimePreciseAsFileTimeFunc Py_GetSystemTimePreciseAsFileTime;
+
+static int Py_GetSystemTimePreciseAsFileTime_Init(void *Py_UNUSED(arg))
+{
+    HMODULE hKernel32 = GetModuleHandleW(L"kernel32");
+    if (hKernel32) {
+        Py_GetSystemTimePreciseAsFileTime = (GetSystemTimePreciseAsFileTimeFunc)GetProcAddress(hKernel32, "GetSystemTimePreciseAsFileTime");
+    }
+    return 0;
+}
+#endif
+
+
 // N.B. If raise_exc=0, this may be called without a thread state.
 static int
 py_get_system_clock(PyTime_t *tp, _Py_clock_info_t *info, int raise_exc)
@@ -910,7 +928,12 @@ py_get_system_clock(PyTime_t *tp, _Py_clock_info_t *info, int raise_exc)
     FILETIME system_time;
     ULARGE_INTEGER large;
 
-    GetSystemTimePreciseAsFileTime(&system_time);
+    _PyOnceFlag_CallOnce(&once, Py_GetSystemTimePreciseAsFileTime_Init, NULL);
+    if (Py_GetSystemTimePreciseAsFileTime) {
+        Py_GetSystemTimePreciseAsFileTime(&system_time);
+    } else {
+        GetSystemTimeAsFileTime(&system_time);
+    }
     large.u.LowPart = system_time.dwLowDateTime;
     large.u.HighPart = system_time.dwHighDateTime;
     /* 11,644,473,600,000,000,000: number of nanoseconds between
@@ -919,11 +942,25 @@ py_get_system_clock(PyTime_t *tp, _Py_clock_info_t *info, int raise_exc)
     PyTime_t ns = (large.QuadPart - 116444736000000000) * 100;
     *tp = ns;
     if (info) {
-        // GetSystemTimePreciseAsFileTime() is implemented using
-        // QueryPerformanceCounter() internally.
-        info->implementation = "GetSystemTimePreciseAsFileTime()";
+        if (Py_GetSystemTimePreciseAsFileTime) {
+            // GetSystemTimePreciseAsFileTime() is implemented using
+            // QueryPerformanceCounter() internally.
+            info->implementation = "GetSystemTimePreciseAsFileTime()";
+            info->resolution = _PyTimeFraction_Resolution(&_PyRuntime.time.base);
+        } else {
+            DWORD timeAdjustment, timeIncrement;
+            BOOL isTimeAdjustmentDisabled, ok;
+
+            info->implementation = "GetSystemTimeAsFileTime()";
+            ok = GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement,
+                                         &isTimeAdjustmentDisabled);
+            if (!ok) {
+                PyErr_SetFromWindowsErr(0);
+                return -1;
+            }
+            info->resolution = timeIncrement * 1e-7;
+        }
         info->monotonic = 0;
-        info->resolution = _PyTimeFraction_Resolution(&_PyRuntime.time.base);
         info->adjustable = 1;
     }
 
